# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

# http://qiita.com/takuchan9104/items/237dd39bf5987879b106
'body':
    'ctrl-tab ^ctrl': 'unset!'
    'ctrl-tab': 'pane:show-next-item'
    'ctrl-shift-tab ^ctrl': 'unset!'
    'ctrl-shift-tab': 'pane:show-previous-item'
    'cmd-[': 'unset!'
    'cmd-]': 'unset!'
    'cmd-{': 'unset!'
    'cmd-}': 'unset!'
    'ctrl-shift-m': 'markdown-preview:toggle'

'atom-workspace':
    'shift-cmd-t': 'unset!'

'atom-text-editor':
    'ctrl-shift-t': 'textile-preview:toggle'

'atom-text-editor:not([mini])':
    'ctrl-shift-m': 'unset!'
    'ctrl-shift-u': 'encoding-selector:show'
    'cmd-[': 'window:focus-pane-on-left'
    'cmd-]': 'window:focus-pane-on-right'
    'cmd-{': 'pane:split-left-and-copy-active-item'
    'cmd-}': 'pane:split-right-and-copy-active-item'
